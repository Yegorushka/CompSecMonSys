from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt
import sys, os, socket, subprocess, re
from Crypto.Cipher import AES

try:
    Form, _ = uic.loadUiType("main_client.ui")
except Exception as e:
    print(f"‚ùå–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {e}")
    sys.exit(1)

class Ui(QtWidgets.QMainWindow, Form):
    def __init__(self):
        super(Ui, self).__init__()
        self.setupUi(self)

        self.pushButton_send_file.clicked.connect(self.on_button_send_file)

        self.counter = 0
        self.checkBox_auto_search.stateChanged.connect(self.toggle_timer)
        self.comboBox_time.addItems(["3 —Å–µ–∫—É–Ω–¥—ã", "10 —Å–µ–∫—É–Ω–¥", "30 —Å–µ–∫—É–Ω–¥", "60 —Å–µ–∫—É–Ω–¥"])
        self.comboBox_time.currentIndexChanged.connect(self.change_interval)
        self.intervals = {
            "3 —Å–µ–∫—É–Ω–¥—ã": 3000,
            "10 —Å–µ–∫—É–Ω–¥": 10000,
            "30 —Å–µ–∫—É–Ω–¥": 30000,
            "60 —Å–µ–∫—É–Ω–¥": 60000
        }
        self.current_interval = 5000  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1 —Å–µ–∫—É–Ω–¥–∞
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä
        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.on_button_click_client)  # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–∞–π–º–µ—Ä–∞ —Å –º–µ—Ç–æ–¥–æ–º

        self.pushButton_create_info.clicked.connect(self.on_button_create_info)
        
        with open('scripts/telegram/chat_id.txt', "r", encoding="utf-8") as file:
            text = file.read().strip()
            self.lineEdit_tele_id.setText(text)
        
        self.pushButton_save_tele_id.clicked.connect(self.save_chat_id)
        self.pushButton_send_tele.clicked.connect(self.send_tele)
        self.pushButton_set_file.clicked.connect(self.set_file)

    def set_file(self):
        from PyQt5.QtWidgets import QFileDialog
        file, _ = QFileDialog.getOpenFileName(self, "Open file", "", "Text documents (*.txt) files (*.*)")
        print(file)
        self.lineEdit_send_file.setText(file)

    def send_tele(self):
        if os.path.isfile(self.lineEdit_send_file.text()):
            from scripts import telebot_send
            telebot_send.send_file_to_telegram(self.lineEdit_send_file.text())
            self.textBrowser_errors_send.setStyleSheet("color: green;")
            self.textBrowser_errors_send.setText(f"‚úÖ –§–∞–π–ª {self.lineEdit_send_file.text()} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            self.textBrowser_errors_send.setStyleSheet("color: red;")
            self.textBrowser_errors_send.setText("‚ùå –¢–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å!")

    def save_chat_id(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ QLineEdit –≤ —Ñ–∞–π–ª"""
        text = self.lineEdit_tele_id.text().strip()
        try:
            with open('scripts\\telegram\\chat_id.txt', "w", encoding="utf-8") as file:
                file.write(text)
            print(f"‚úÖ –ß–∞—Ç ID {text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            self.textBrowser_errors_send.setStyleSheet("color: green;")
            self.textBrowser_errors_send.setText(f"‚úÖ –ß–∞—Ç ID {text} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}") 
            self.textBrowser_errors_send.setStyleSheet("color: red;")
            self.textBrowser_errors_send.setText(f"‚ùå–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    def on_button_create_info(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        report = []
        if self.checkBox_port.isChecked():
            # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
            from scan_vuln import scan_top_ports
            report.append("=== Open Ports ===")
            self.textBrowser_errors_info.append("‚úÖOpen Ports")
            scan_ports = scan_top_ports.scan_common_ports()
            report.append(scan_ports)

        if self.checkBox_sys_info.isChecked(): 
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            from scan_vuln import get_system_info
            report.append("\n=== System Information ===\n")
            self.textBrowser_errors_info.append("‚úÖSystem Information")
            system_info = get_system_info.get_system_info()
            for key, value in system_info.items():
                report.append(f"{key}: {value}")

        if self.checkBox_active_con.isChecked():
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            from scan_vuln import get_active_connections
            report.append("\n=== Active Connections ===")
            self.textBrowser_errors_info.append("‚úÖActive Connections")
            active_connections = get_active_connections.get_active_connections()
            for conn in active_connections:
                report.append(f"Local: {conn['Local Address']} -> Remote: {conn['Remote Address']} (Status: {conn['Status']})")

        if self.checkBox_net_con.isChecked():
            # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
            from scan_vuln import get_network_info
            report.append("\n\n=== Network Information ===\n")
            self.textBrowser_errors_info.append("‚úÖNetwork Information")
            network_info = get_network_info.get_network_info()
            for key, value in network_info.items():
                if key == "Interfaces":
                    report.append("Interfaces:")
                    for interface in value:
                        report.append(f"  - {interface['Interface']}: {interface['IP Address']} (Netmask: {interface['Netmask']})\n")
                else:
                    report.append(f"{key}: {value}")

        if self.checkBox_brandmayer.isChecked():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞"""
            report.append("\n=== Brandmayer Information ===\n")
            self.textBrowser_errors_info.append("‚úÖBrandmayer Information")
            try:
                if re.search(r"State\s+OFF", subprocess.check_output("netsh advfirewall show allprofiles", shell=True).decode()):
                    report.append("[WARNING] –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –≤—ã–∫–ª—é—á–µ–Ω!")
                else:
                    report.append("[OK] –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –≤–∫–ª—é—á–µ–Ω.")
            except Exception as e:
                report.append(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞: {e}")

        if self.checkBox_antivirus.isChecked():
            from scan_vuln.check_antivirus import check
            report.append("\n\n=== Antivirus Information ===\n")
            self.textBrowser_errors_info.append("‚úÖAntivirus Information")
            report.append(check)

        if self.checkBox_vuln.isChecked():
            from scan_vuln.check_windows_vulnerabilities import check
            report.append("\n\n=== Vulnerable Information ===\n")
            self.textBrowser_errors_info.append("‚úÖVulnerable Information")
            for x in check:
                report.append(x)

        if self.checkBox_process.isChecked():
            from scan_vuln import process
            report.append("\n\n=== Process Information ===\n")
            self.textBrowser_errors_info.append("‚úÖProcess Information")
            report.append(process.get_process_report())

        for item in report:    
            print(item)

        string = "".join(report)
        from datetime import datetime
        filename = datetime.now().strftime("%Y-%m-%d_%H-%M-%S") + ".txt"
        with open(filename, "w", encoding="utf-8") as file:
            file.write(string)
        print(f"üìù–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω!")
        self.textBrowser_errors_info.append(f"üìù–§–∞–π–ª '{filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω!")

        self.lineEdit_send_file.setText(filename)

        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def on_button_send_file(self):

        KEY = b'Sixteen byte key'  # 16-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á AES
        IV = b'This is an IV456'  # 16-–±–∞–π—Ç–Ω—ã–π IV (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä)

        def encrypt_file(input_file):
            try:
                """ –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ """
                cipher = AES.new(KEY, AES.MODE_CFB, IV)
                
                with open(input_file, 'rb') as f:
                    file_data = f.read()

                encrypted_data = cipher.encrypt(file_data)
                return encrypted_data
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")

        def send_file(client_socket, filename):
            """ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ """
            try:
                encrypted_data = encrypt_file(filename)
                client_socket.sendall(encrypted_data)
                print(f"üîê –§–∞–π–ª {filename} –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            finally:
                client_socket.close()

        QApplication.setOverrideCursor(Qt.WaitCursor)
        try:
            if os.path.isfile(self.lineEdit_send_file.text()):                 
                try:
                    host = '0.0.0.0'  # –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
                    port = 12346  

                    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    server_socket.bind((host, port))
                    server_socket.listen(1)
                    server_socket.settimeout(5)
                    print(f"üì° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")


                    client_socket, client_address = server_socket.accept()
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {client_address}")

                    send_file(client_socket, self.lineEdit_send_file.text())

                    server_socket.close()

                    self.textBrowser_errors_send.setStyleSheet("color: green;")
                    self.textBrowser_errors_send.setText(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {client_address}\nüì§–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞: {e}")
                    self.textBrowser_errors_send.setStyleSheet("color: red;")
                    self.textBrowser_errors_send.setText(f"–û—à–∏–±–∫–∞: {e}")

            else:
                self.textBrowser_errors_send.setStyleSheet("color: red;")
                self.textBrowser_errors_send.setText("‚ùå –¢–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å!")                
        except Exception as e:
            self.textBrowser_errors_send.setStyleSheet("color: red;")
            self.textBrowser_errors_send.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"–û—à–∏–±–∫–∞: {e}")
        QApplication.setOverrideCursor(Qt.ArrowCursor)

    def toggle_timer(self, state):
            """–í–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–∞–ª–æ—á–∫–∏."""
            if state == QtCore.Qt.Checked:
                self.timer.start(self.current_interval)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            else:
                self.timer.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä

    def change_interval(self):
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞."""
            selected_text = self.comboBox_time.currentText()
            self.current_interval = self.intervals[selected_text]
            if self.checkBox_auto_search.isChecked():  # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                self.timer.start(self.current_interval)

    def on_button_click_client(self):
        from scripts import replace_last_octet_with_255
        from scripts import get_ip_address_of_wifi
        self.counter += 1
        self.label_count_q.setText(f"üì°–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(self.counter)}")
        ip_client = get_ip_address_of_wifi.get_ip_address_of_wifi()

        self.label_localhost.setText(f"üíª–í–∞—à IP-–∞–¥—Ä–µ—Å: {ip_client}")
        print(f"üíª–í–∞—à IP-–∞–¥—Ä–µ—Å: {ip_client}")
        try:

            broadcast_address = replace_last_octet_with_255.replace_last_octet_with_255(ip_client)
            print(broadcast_address)
            port = 12345
            message = b"Who is the server?"
            ip_server = ''

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∫–µ—Ç–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
            sock.sendto(message, (broadcast_address, port))

            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            sock.settimeout(1)
            try:
                response, server_address = sock.recvfrom(1024)
                print(f"Server IP: {server_address[0]}, Response: {response.decode()}")
                ip_server = server_address[0]
            except socket.timeout:
                print("No response from server.")

            self.textBrowser_errors.setStyleSheet("color: green;")
            self.textBrowser_errors.setText(f"üñ•Server IP: {server_address[0]}, ‚úÖResponse: {response.decode()}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            client_socket.connect((ip_server, 12345))  # –ó–∞–º–µ–Ω–∏—Ç–µ 'IP_—Å–µ—Ä–≤–µ—Ä–∞' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            while True:
                # message = input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ")
                client_socket.send(ip_client.encode('utf-8'))

                # if message.lower() == 'exit':
                #     break

                response = client_socket.recv(1024).decode('utf-8')
                print(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response}")
                break
            client_socket.close()

            self.timer.stop()
            self.checkBox_auto_search.setChecked(False)

        except Exception as e:
            self.textBrowser_errors.setStyleSheet("color: red;")
            self.textBrowser_errors.setText(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = Ui()
    main_window.show()
    sys.exit(app.exec_())