from PyQt5 import QtWidgets, uic, QtCore
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt
import sys, os, shutil, socket

try:
    Form, _ = uic.loadUiType("bg.ui")
except Exception as e:
    print(f"‚ùå–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ UI: {e}")
    sys.exit(1)

destination = r"C:\Users\(x_x)\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
source_parameters = 'parameters.txt'

class Ui(QtWidgets.QMainWindow, Form):
    def __init__(self):
        super(Ui, self).__init__()
        self.setupUi(self)

        self.pushButton_save.clicked.connect(self.on_button_create_info)
        self.checkBox_autostart.stateChanged.connect(self.toggle_text_checkbox)
        self.load_checkbox_state()

    def load_checkbox_state(self):
        """–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞"""
        path_parameters = os.path.join(destination, source_parameters)
        if os.path.exists(path_parameters):
            with open(path_parameters, "r", encoding="utf-8") as file:
                content = file.read().strip().lower()
                if "autostart on" in content:
                    self.checkBox_autostart.setChecked(True)  # –í–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å
                    self.checkBox_autostart.setText("–í–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
                else:
                    self.checkBox_autostart.setChecked(False)  # –í—ã–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å
                    self.checkBox_autostart.setText("–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
        else:
            self.checkBox_autostart.setChecked(False)  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —á–µ–∫–±–æ–∫—Å –≤—ã–∫–ª—é—á–µ–Ω
            self.checkBox_autostart.setText("–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")

    def toggle_text_checkbox(self, state):
        """–ú–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —á–µ–∫–±–æ–∫—Å–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        if state == 2:  # Qt.Checked
            self.checkBox_autostart.setText("–í–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")
        else:
            self.checkBox_autostart.setText("–í—ã–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫")

    def on_button_create_info(self):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        report = []

        # –Ø –Ω–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–æ–±–∫–∏, –∞  os.path.join –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –±–µ–∑ —Å–∫–æ–±–æ–∫
        # destination = os.path.join(
        #     "C:\\Users", socket.gethostname(), "AppData", "Roaming", "Microsoft", "Windows", "Start Menu", "Programs", "Startup"
        # ) 

        if self.checkBox_port.isChecked():
            report.append("ports on\n")

        if self.checkBox_sys_info.isChecked(): 
            report.append("sys_info on\n")

        if self.checkBox_active_con.isChecked():
            report.append("active_con on\n")

        if self.checkBox_net_con.isChecked():
            report.append("net_con on\n")

        if self.checkBox_brandmayer.isChecked():
            report.append("brandmayer on\n")

        if self.checkBox_antivirus.isChecked():
            report.append("antivirus on\n")

        if self.checkBox_vuln.isChecked():
            report.append("vuln on\n")

        if self.checkBox_process.isChecked():
            report.append("process on\n")

        source_monitor = "system_monitor.py"
        source_scan_vuln = "scan_vuln"
        if self.checkBox_autostart.isChecked():
            report.append("autostart on")
            try:
                shutil.move(source_monitor, destination) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                shutil.move(source_scan_vuln, destination)
                print(f"–§–∞–π–ª {source_monitor} –ø–µ—Ä–µ–º–µ—â–µ–Ω!")
            except Exception as e:
                print("–û—à–∏–±–∫–∞: ",e)
        else:
            try:
                shutil.move(os.path.join(destination, source_monitor), os.getcwd())
                shutil.move(os.path.join(destination, source_scan_vuln), os.getcwd())
                print(f"–§–∞–π–ª {source_monitor} –ø–µ—Ä–µ–º–µ—â–µ–Ω!")
            except Exception as e:
                print("–û—à–∏–±–∫–∞: ",e)

        for item in report:    
            print(item)

        string = "".join(report)
        from datetime import datetime
        with open('parameters.txt', "w", encoding="utf-8") as file:
            file.write(string)
        print(f"üìù–§–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω!")

        # destination = r"C:\Users\(x_x)\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\parameters.txt"
  

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        exist_parameters = os.path.join(destination, source_parameters)
        if os.path.exists(exist_parameters):
            os.remove(exist_parameters)
        shutil.move(source_parameters, destination) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª

        QApplication.setOverrideCursor(Qt.ArrowCursor)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = Ui()
    main_window.show()
    sys.exit(app.exec_())